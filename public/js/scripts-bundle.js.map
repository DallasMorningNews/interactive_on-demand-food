{"version":3,"sources":["+custom.js"],"names":["$","document","ready","checkAnswer","thisObj","toggleClass","parent","hasClass","siblings","removeClass","updateServices","validateInput","isNaN","val","addClass","attr","length","checkZips","parseInt","each","services","k","v","service_area","runScores","user","fee","userZip","inArray","zips","console","log","score","id","children","css","instant","subscription","groceries","i","customer","question","closest","find","index","this","push","text","alert","d","Date","year","getFullYear","name","favorite","click","keyup","blur","window","scroll","questionsTop","offset","top","questionsHeight","height","windowHeight","windowBottom","scrollTop"],"mappings":"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","file":"scripts-bundle.js","sourcesContent":["$(document).ready(function() {\n\n\t//custom scripting goes here\n\n\t// injecting current year into footer\n\t// DO NOT DELETE\n\n\tvar d = new Date();\n\tvar year = d.getFullYear();\n\n\t$('.copyright').text(year);\n\n\n\t// some code blocks require javascript to function, like slideshows, synopsis blocks, etc\n\t// you can find that code here: https://github.com/DallasMorningNews/generator-dmninteractives/wiki/Cookbook\n\n\n\tvar services = [\n\t\t{\n\t\t\t\"id\": \"uber\",\n\t\t\t\"name\": \"Uber Eats\",\n\t\t\t\"zips\": [75228],\n\t\t\t\"instant\": true,\n\t\t\t\"subscription\": false,\n\t\t\t\"groceries\": false,\n\t\t\t\"fee\": [2.99, 3.99],\n\t\t\t\"favorite\": \"\",\n\t\t\t\"customer\": [\"Flexible\", \"Hungry\"],\n\t\t\t\"score\": 0,\n\t\t\t\"service_area\": true\n\t\t},\n\t\t{\n\t\t\t\"id\": \"caviar\",\n\t\t\t\"name\": \"Caviar\",\n\t\t\t\"zips\": [75229],\n\t\t\t\"instant\": false,\n\t\t\t\"subscription\": true,\n\t\t\t\"groceries\": false,\n\t\t\t\"fee\": [0, 4.99],\n\t\t\t\"favorite\": [\"Pizza\", \"Ramen\"],\n\t\t\t\"customer\": [\"Foodie\"],\n\t\t\t\"score\": 0,\n\t\t\t\"service_area\": true\n\t\t},\n\t\t{\n\t\t\t\"id\": \"grubhub\",\n\t\t\t\"name\": \"GrubHub\",\n\t\t\t\"zips\": [75230],\n\t\t\t\"instant\": false,\n\t\t\t\"subscription\": true,\n\t\t\t\"groceries\": false,\n\t\t\t\"fee\": [2.99, 2.99],\n\t\t\t\"favorite\": [\"Tex-Mex\"],\n\t\t\t\"customer\": [\"Flexible\"],\n\t\t\t\"score\": 0,\n\t\t\t\"service_area\": true\n\t\t},\n\t\t{\n\t\t\t\"id\":  \"postmates\",\n\t\t\t\"name\": \"Postmates\",\n\t\t\t\"zips\": [75228],\n\t\t\t\"instant\": false,\n\t\t\t\"subscription\": false,\n\t\t\t\"groceries\": false,\n\t\t\t\"fee\": [0, 5.00],\n\t\t\t\"favorite\": [\"Fast Food\"],\n\t\t\t\"customer\": [\"On-demand\"],\n\t\t\t\"score\": 0,\n\t\t\t\"service_area\": true\n\t\t},\n\t\t{\n\t\t\t\"id\": \"favor\",\n\t\t\t\"name\": \"Favor\",\n\t\t\t\"zips\": [75229],\n\t\t\t\"instant\": false,\n\t\t\t\"subscription\": true,\n\t\t\t\"groceries\": true,\n\t\t\t\"fee\": [7, 7],\n\t\t\t\"favorite\": [\"Tacos\", \"Sushi\", \"Fast Food\"],\n\t\t\t\"customer\": [\"Hungry\", \"Shopper\"],\n\t\t\t\"score\": 0,\n\t\t\t\"service_area\": true\n\t\t},\n\t\t{\n\t\t\t\"id\": \"amazon\",\n\t\t\t\"name\": \"Amazon Prime Now\",\n\t\t\t\"zips\": [75230],\n\t\t\t\"instant\": true,\n\t\t\t\"subscription\": true,\n\t\t\t\"groceries\": true,\n\t\t\t\"fee\": [8.99, 8.99],\n\t\t\t\"favorite\": [\"\"],\n\t\t\t\"customer\": [\"Hungry\"],\n\t\t\t\"score\": 0,\n\t\t\t\"service_area\": true\n\t\t},\n\t\t{\n\t\t\t\"id\": \"doordash\",\n\t\t\t\"name\": \"DoorDash\",\n\t\t\t\"zips\": [75228],\n\t\t\t\"instant\": false,\n\t\t\t\"subscription\": false,\n\t\t\t\"groceries\": false,\n\t\t\t\"fee\": [1.99, 6.99],\n\t\t\t\"favorite\": [\"Mexican\"],\n\t\t\t\"customer\": [\"\"],\n\t\t\t\"score\": 0,\n\t\t\t\"service_area\": true\n\t\t}\n\t];\n\n\n\tvar user = {\n\t\t\"instant\": \"\",\n\t\t\"groceries\": \"\",\n\t\t\"subscription\": \"\",\n\t\t\"customer\": [],\n\t\t\"fee\": 10000\n\t};\n\n\t////////////////////////////////////////////////////\n\t///// CHECKING ANSWERS /////////////////////////////\n\t////////////////////////////////////////////////////\n\n\t// toggling the check class on answer\n\n\t$(\".answerBlock span\").click(function() {\n\t\tcheckAnswer($(this));\n\t});\n\n\tfunction checkAnswer(thisObj) {\n\n\t\t// toggle the unchecked and checked classes on the option clicked\n\t\tthisObj.toggleClass(\"unchecked\").toggleClass(\"checked\");\n\n\t\t// if this is a boolean question (yes/no), remove the checked class\n\t\t// from the other option if the other option has the checked class\n\t\tif (thisObj.parent().hasClass(\"boolean\")) {\n\t\t\tthisObj.siblings().removeClass(\"checked\");\n\t\t}\n\n\n\t\tupdateServices(thisObj);\n\t}\n\n\n\n\t////////////////////////////////////////////////////\n\t///// VALIDATING INPUT FIELDS //////////////////////\n\t////////////////////////////////////////////////////\n\n\t// checking the values on the zip and fee inputs and making sure they\n\t// match our requirements (are numbers, 5 digit zip codes)\n\n\t$(\"#zip\").keyup(function() {\n\t\tvalidateInput($(this));\n\t});\n\n\t$(\"#feeInput\").blur(function() {\n\t\tconsole.log(\"blur\");\n\t\tvalidateInput($(this));\n\t\tupdateServices($(this));\n\t});\n\n\n\tfunction validateInput(thisObj) {\n\n\t\t// first check if the value is a number, if it is, show the valid label\n\t\tif (isNaN(thisObj.val()) === true) {\n\t\t\tthisObj.siblings(\".invalid\").removeClass(\"noShow\");\n\t\t\tthisObj.siblings(\".valid\").addClass(\"noShow\");\n\t\t}\n\t\t// if the value is not a number, show the invalid label\n\t\telse {\n\t\t\tthisObj.siblings(\".invalid\").addClass(\"noShow\");\n\t\t\tthisObj.siblings(\".valid\").removeClass(\"noShow\");\n\t\t}\n\n\t\t// then check if the input is the zip input and the length is 5\n\t\t// if it is, show the invalid label\n\t\tif (thisObj.attr(\"id\") === \"zip\" && thisObj.val().length !== 5) {\n\t\t\tthisObj.siblings(\".invalid\").removeClass(\"noShow\");\n\t\t\tthisObj.siblings(\".valid\").addClass(\"noShow\");\n\t\t}\n\t\t// if it is the zip input and the length is equal to 5, show the valid label\n\t\telse if (thisObj.attr(\"id\") === \"zip\" && thisObj.val().length === 5) {\n\t\t\tthisObj.siblings(\".invalid\").addClass(\"noShow\");\n\t\t\tthisObj.siblings(\".valid\").removeClass(\"noShow\");\n\n\t\t\t// if we have a valid zip, pass the value off to the checkZips function\n\t\t\tcheckZips(parseInt(thisObj.val()));\n\t\t}\n\n\t\t// lastly, check if the field is empty\n\t\tif (thisObj.val() === \"\") {\n\t\t\t// if the field is empty, remove both valid and invalid flags\n\t\t\tthisObj.siblings(\".validator\").addClass(\"noShow\");\n\n\t\t\t// if it is the zip field that is empty, set the service area value\n\t\t\t// for every service to true, and rerun the scores\n\t\t\tif (thisObj.attr(\"id\") === \"zip\") {\n\t\t\t\t$.each(services, function(k,v) {\n\t\t\t\t\tv.service_area = true;\n\t\t\t\t\trunScores();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// if it is the fee field that is empty, set the user.fee key to 10000\n\t\t\t// insuring it won't be lower than any fee, then updateServices\n\t\t\tif (thisObj.attr(\"id\") === \"feeInput\") {\n\t\t\t\tuser.fee = 10000;\n\t\t\t\tupdateServices(thisObj);\n\t\t\t}\n\t\t}\n\n\t}\n\n\n\n\n\t////////////////////////////////////////////////////\n\t///// CHECKING THE ZIPS FOR SERVICE AREA ///////////\n\t////////////////////////////////////////////////////\n\n\tfunction checkZips(userZip) {\n\n\t\t// check each service in the services array and see if its zip array contains\n\t\t// the user's zip. if it does, set the service area of the service to true\n\t\t// if it doesn't, set it to false, then run the scores\n\t\t$.each(services, function(k,v) {\n\t\t\tif ($.inArray(userZip, v.zips) === -1) {\n\t\t\t\tv.service_area = false;\n\t\t\t} else {\n\t\t\t\tv.service_area = true;\n\t\t\t}\n\t\t});\n\n\t\trunScores();\n\t}\n\n\n\t////////////////////////////////////////////////////\n\t///// RUNNING SCORES, UPDATING SERVICES ////////////\n\t////////////////////////////////////////////////////\n\n\n\t// updating the score for each service\n\tfunction runScores() {\n\t\tconsole.log(user);\n\t\t// for each service, set a score variable to 0\n\t\t$.each(services, function(k,v) {\n\t\t\tvar score = 0;\n\n\t\t\t// if the service's service_area is false, fade that service back and\n\t\t\t// set it's highlight div's width to 0\n\t\t\t// else, fade that service back in\n\t\t\tif (v.service_area === false) {\n\t\t\t\t$(\"#\" + v.id).addClass(\"noService\");\n\t\t\t\t$(\"#\" + v.id).children(\".highlight\").css(\"width\", 0);\n\t\t\t} else {\n\t\t\t\t$(\"#\" + v.id).removeClass(\"noService\");\n\t\t\t}\n\n\t\t\t// check the other user keys against the services and adjusts the scores\n\t\t\tif (v.instant === user.instant) {\n\t\t\t\tscore++;\n\t\t\t}\n\t\t\tif (v.subscription === user.subscription) {\n\t\t\t\tscore++;\n\t\t\t}\n\t\t\tif (v.groceries === user.groceries) {\n\t\t\t\tscore++;\n\t\t\t}\n\t\t\tif (v.fee[1] > user.fee) {\n\t\t\t\tscore++;\n\t\t\t}\n\t\t\tfor (i=0; i < v.customer.length; i++) {\n\t\t\t\tif ($.inArray(v.customer[i], user.customer) > -1) {\n\t\t\t\t\tscore++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// update the score on each service\n\t\t\tv.score = score;\n\n\t\t\t// update the highlight div on the each service only if the div\n\t\t\t// does not have the \"noService\" class\n\t\t\tif ($(\"#\" + v.id).hasClass(\"noService\") === false) {\n\t\t\t\t$(\"#\" + v.id).children(\".highlight\").css(\"width\", ((v.score * 20) + \"%\"));\n\t\t\t}\n\t\t});\n\t}\n\n\n\t// checking what questions were answered and updating the user object based on that\n\tfunction updateServices(thisObj) {\n\n\t\t// grabbing the id of the question that was answered\n\t\tvar question = thisObj.closest(\".question\").attr(\"id\");\n\n\t\t// check which question was answered, then update the user object based on that\n\t\tswitch(question) {\n\t\t\tcase \"instant\":\n\t\t\t\tif (thisObj.closest(\".answerBlock\").find(\".checked\").index() === -1) {\n\t\t\t\t\tuser.instant = \"\";\n\t\t\t\t} else {\n\t\t\t\t\tuser.instant = (thisObj.closest(\".answerBlock\").find(\".checked\").attr(\"data-answer\") === \"true\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"groceries\":\n\t\t\t\tif (thisObj.closest(\".answerBlock\").find(\".checked\").index() === -1) {\n\t\t\t\t\tuser.groceries = \"\";\n\t\t\t\t} else {\n\t\t\t\t\tuser.groceries = (thisObj.closest(\".answerBlock\").find(\".checked\").attr(\"data-answer\") === \"true\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"subscription\":\n\t\t\t\tif (thisObj.closest(\".answerBlock\").find(\".checked\").index() === -1) {\n\t\t\t\t\tuser.subscription = \"\";\n\t\t\t\t} else {\n\t\t\t\t\tuser.subscription = (thisObj.closest(\".answerBlock\").find(\".checked\").attr(\"data-answer\") === \"true\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t// if the fee question was answered, check to make sure there is a number and not and empty field\n\t\t\tcase \"fee\":\n\t\t\t\tif (isNaN(thisObj.val()) === false && thisObj.val().length > 0) {\n\t\t\t\t\tuser.fee = thisObj.val();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t// if the customer question was answered, check to see if one of\n\t\t\t// the answers is listed in the services customer array\n\t\t\tcase \"customer\":\n\t\t\t\tuser.customer = [];\n\t\t\t\t$.each($(\"#customer .answerBlock span\"), function() {\n\t\t\t\t\tif ($(this).hasClass(\"checked\") === true) {\n\t\t\t\t\t\tuser.customer.push($(this).text());\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbreak;\n\n\t\t\t// let the user know they really broke some shit if they're seeing this\n\t\t\tdefault: alert(\"If you're seeing this message, something horribly wrong has happened.\");\n\t\t}\n\n\t\trunScores();\n\n\t}\n\n\n\t// controlling the services bar on window scroll\n\t// tldr: if the top of the questions div is above the bottom of the window\n\t// and the bottom of the questions div is below the bottom of the window\n\t// make the services bar sticky\n\t\n\t$(window).scroll(function() {\n\t\tvar questionsTop = $(\"#questions\").offset().top;\n\t\tvar questionsHeight = $(\"#questions\").height();\n\n\t\tvar windowHeight = $(window).height();\n\t\tvar windowBottom = $(window).scrollTop() + windowHeight;\n\n\t\tif (windowBottom > questionsTop && windowBottom < questionsTop + questionsHeight) {\n\t\t\t$(\"#services\").addClass(\"sticky\").addClass(\"visible\");\n\t\t} else {\n\t\t\t$(\"#services\").removeClass(\"sticky\").removeClass(\"visible\");\n\t\t}\n\t});\n\n\n\n\n\n\n\n});\n"],"sourceRoot":"/source/"}